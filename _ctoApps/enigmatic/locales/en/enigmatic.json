{
  "AFTER_REFLECTOR": "After Reflector Wheel:",
  "BUTTON_CANCEL": "Cancel",
  "CALCULATION": "Calculation",
  "CHANGE_INPUT": "Change input",
  "CHANGE_IV": "Change initial vector",
  "CHANGE_KEY": "Change key",
  "CHANGE_PERMUTATION": "Change permutation",
  "CHANGE_SBOX": "Change S-Box",
  "CONFIGURATION": "Configuration",
  "CONFIGURATION_INTRO": "<p>The configuration of the Engima Cipher Machine has three parts:</p><ol><li>The Wheels with overflows and offsets,</li><li>The Reflector Wheel, and</li><li>The Patchboard.</li></ol><p>Parts of the configuration can be treated as public knowledge or as part of the key.</p>",
  "DECODED": "Decoded",
  "DECODING_ROUNDS": "Decoding/Encoding Rounds",
  "ENCODED": "Encoded",
  "ENCODING_INPUT_CHAR": "Encoding/Decoding Input Character $1 to $2 at position $3",
  "ENCODING_ROUNDS": "Encoding/Decoding Rounds",
  "EXPANDED_KEY": "Expanded Key",
  "INITIAL_VECTOR": "Initial Vector (CBC only)",
  "INPUT": "Input",
  "INPUT_WRONG_LEN": "Input must be ## bytes long",
  "INTRO": "Inspect the encryption and decryption of Enigma Cipher Machine step by step.",
  "INVALID_BYTE_SEQUENCE": "Invalid byte sequence entered",
  "KEY": "Key",
  "LANG": "en",
  "NO_CHAINING": "None",
  "NON_STANDARD_CONF": "Current configuration is impossible with a physical enigma.",
  "NOT_VALID_HEX": "'##' is not a valid hex digit",
  "NUMBER_OF_ROUNDS": "Number of Rounds:",
  "PLUGBOARD": "Plugboard",
  "PLUGBOARD_INTRO": "<p>You can swap additional letters.</p>",
  "REFLECTOR": "Reflector Wheel",
  "REFLECTOR_INTRO": "<p>The Reflector Wheel must map each letter to a different one. Otherwise all encryption steps will be undone on the way back.</p>",
  "REFLECTOR_PRESET": "Standard Reflector Wheels",
  "REFLECTOR_SWAPS": "Letter swaps",
  "REFLECTOR_WHEEL": "Resulting Wheel Permutation",
  "ROUND": "Round",
  "STEP_BACKWARD": "Backward: $$",
  "STEP_INPUT": "Forward: Input = $$",
  "STEP_OUTPUT": " = Output",
  "STEP_PLUGBOARD": " -[Plugboard]-> $$",
  "STEP_REFLECTOR": " --[Reflector]--> $$",
  "STEP_WHEEL": " --[Wheel $1]--> $2",
  "USED_SUBKEY": "Used subkey:",
  "WHEEL": "Wheel $$",
  "WHEEL_ADD": "Add Wheel",
  "WHEEL_ADVANCEMENT": "Advanced Wheels from $1 to $2",
  "WHEEL_ANOMAL": "Wheel will be advanced if left sibling advances",
  "WHEEL_DELETE": "Remove last Wheel",
  "WHEEL_OFFSET": "Offset",
  "WHEEL_OVERFLOWS": "Overflows",
  "WHEEL_PERMUTATION": "Permutation",
  "WHEEL_PRESET": "Standard Wheels",
  "WHEELS": "Wheels",
  "WHEELS_INTRO": "<p>Each wheel is the permutation of the letters. There are five permutations provided but you can create your own as long as it is a real permutation. The permutation can be offset (that makes sense if you have only the five wheels available in the real machine).</p><p>Additionally you must specify at which letters an overflow to the next wheel will happen.</p><p>The offset allows to rotate the permutations relative to the alphabet. With offset 1 no shifting takes place. In offset 2 B will be used instead of A, C instead of B and so on.</p>"
}
